/**
 * Daily Action Plan Scheduler Service
 * G√ºnl√ºk Eylem Planƒ± Zamanlayƒ±cƒ± Servisi
 * 
 * Her sabah saat 9'da otomatik olarak g√ºnl√ºk eylem planƒ± olu≈üturur
 */

import HourlyActionPlannerService from './hourly-action-planner.service.js';
import { dailyActionPlanRepository } from '../repositories/daily-action-plan.repository.js';

let schedulerInterval: NodeJS.Timeout | null = null;

const SCHEDULE_TIME = { hour: 9, minute: 0 };
const CHECK_INTERVAL = 60 * 1000;

function getTodayDateString(): string {
  return new Date().toISOString().split('T')[0];
}

function getNextScheduledTime(): Date {
  const now = new Date();
  const scheduledTime = new Date(
    now.getFullYear(),
    now.getMonth(),
    now.getDate(),
    SCHEDULE_TIME.hour,
    SCHEDULE_TIME.minute,
    0,
    0
  );

  if (now >= scheduledTime) {
    scheduledTime.setDate(scheduledTime.getDate() + 1);
  }

  return scheduledTime;
}

function shouldGeneratePlanNow(): boolean {
  const now = new Date();
  const currentHour = now.getHours();
  const currentMinute = now.getMinutes();

  const isScheduledTime = 
    currentHour === SCHEDULE_TIME.hour && 
    currentMinute >= SCHEDULE_TIME.minute && 
    currentMinute < SCHEDULE_TIME.minute + 5;

  if (!isScheduledTime) {
    return false;
  }

  const todayDate = getTodayDateString();
  const hasAutoGeneratedToday = dailyActionPlanRepository.hasAutoGeneratedPlanForDate(todayDate);

  return !hasAutoGeneratedToday;
}

async function generateDailyPlan(): Promise<void> {
  try {
    const todayDate = getTodayDateString();
    const plannerService = new HourlyActionPlannerService();
    
    console.log(`ü§ñ [${todayDate}] Starting auto-generation of daily action plan...`);
    
    await plannerService.generateAutoScheduledPlan(todayDate);
    
    console.log(`‚úÖ [${todayDate}] Daily action plan auto-generated successfully`);
    
    const nextScheduledTime = getNextScheduledTime();
    console.log(`‚è∞ Next plan scheduled for: ${nextScheduledTime.toLocaleString('tr-TR')}`);
  } catch (error) {
    console.error('‚ùå Error auto-generating daily action plan:', error);
  }
}

async function cleanupOldPlans(): Promise<void> {
  try {
    const deletedCount = dailyActionPlanRepository.deleteOldPlans(30);
    if (deletedCount > 0) {
      console.log(`üóëÔ∏è Cleaned up ${deletedCount} old daily action plan(s)`);
    }
  } catch (error) {
    console.error('‚ùå Error cleaning up old plans:', error);
  }
}

export function startDailyActionPlanScheduler(): void {
  if (schedulerInterval) {
    console.log('‚ö†Ô∏è Daily action plan scheduler is already running');
    return;
  }

  console.log('üöÄ Starting daily action plan scheduler...');
  console.log(`‚è∞ Plans will be generated daily at ${SCHEDULE_TIME.hour}:${String(SCHEDULE_TIME.minute).padStart(2, '0')}`);

  schedulerInterval = setInterval(async () => {
    try {
      if (shouldGeneratePlanNow()) {
        await generateDailyPlan();
      }

      const now = new Date();
      if (now.getHours() === 2 && now.getMinutes() < 5) {
        await cleanupOldPlans();
      }
    } catch (error) {
      console.error('‚ùå Error in daily action plan scheduler:', error);
    }
  }, CHECK_INTERVAL);

  console.log('‚úÖ Daily action plan scheduler started successfully');
  
  const nextScheduledTime = getNextScheduledTime();
  console.log(`‚è∞ Next plan scheduled for: ${nextScheduledTime.toLocaleString('tr-TR')}`);
}

export function stopDailyActionPlanScheduler(): void {
  if (schedulerInterval) {
    clearInterval(schedulerInterval);
    schedulerInterval = null;
    console.log('üõë Daily action plan scheduler stopped');
  }
}

export async function forceGenerateDailyPlan(): Promise<void> {
  console.log('üîÑ Force generating daily action plan...');
  await generateDailyPlan();
}
