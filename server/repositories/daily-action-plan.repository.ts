import getDatabase from '../lib/database/index.js';
import type { CounselorDailyPlan } from '../../shared/types/advanced-ai-analysis.types.js';

export interface DailyActionPlanRecord {
  id: string;
  date: string;
  counselor_name: string | null;
  plan_data: string;
  generated_at: string;
  is_auto_generated: number;
  created_at: string;
  updated_at: string;
}

export class DailyActionPlanRepository {
  private db = getDatabase();

  private preparePlanForStorage(plan: CounselorDailyPlan): string {
    return JSON.stringify(plan);
  }

  private parsePlanFromStorage(planData: string): CounselorDailyPlan {
    return JSON.parse(planData);
  }

  savePlan(plan: CounselorDailyPlan, isAutoGenerated: boolean = false): void {
    const id = `plan_${plan.date}_${Date.now()}`;
    const planData = this.preparePlanForStorage(plan);

    const stmt = this.db.prepare(`
      INSERT OR REPLACE INTO daily_action_plans (
        id, date, counselor_name, plan_data, generated_at, is_auto_generated, updated_at
      ) VALUES (?, ?, ?, ?, ?, ?, CURRENT_TIMESTAMP)
    `);

    stmt.run(
      id,
      plan.date,
      plan.counselorName || null,
      planData,
      plan.generatedAt,
      isAutoGenerated ? 1 : 0
    );
  }

  getPlanByDate(date: string): CounselorDailyPlan | null {
    const stmt = this.db.prepare(`
      SELECT * FROM daily_action_plans 
      WHERE date = ? 
      ORDER BY created_at DESC 
      LIMIT 1
    `);

    const record = stmt.get(date) as DailyActionPlanRecord | undefined;

    if (!record) {
      return null;
    }

    return this.parsePlanFromStorage(record.plan_data);
  }

  deletePlanByDate(date: string): void {
    const stmt = this.db.prepare('DELETE FROM daily_action_plans WHERE date = ?');
    stmt.run(date);
  }

  getRecentPlans(limit: number = 10): CounselorDailyPlan[] {
    const stmt = this.db.prepare(`
      SELECT * FROM daily_action_plans 
      ORDER BY date DESC 
      LIMIT ?
    `);

    const records = stmt.all(limit) as DailyActionPlanRecord[];

    return records.map(record => this.parsePlanFromStorage(record.plan_data));
  }

  hasAutoGeneratedPlanForDate(date: string): boolean {
    const stmt = this.db.prepare(`
      SELECT COUNT(*) as count FROM daily_action_plans 
      WHERE date = ? AND is_auto_generated = 1
    `);

    const result = stmt.get(date) as { count: number };
    return result.count > 0;
  }

  deleteOldPlans(daysToKeep: number = 30): number {
    const cutoffDate = new Date();
    cutoffDate.setDate(cutoffDate.getDate() - daysToKeep);
    const cutoffDateStr = cutoffDate.toISOString().split('T')[0];

    const stmt = this.db.prepare('DELETE FROM daily_action_plans WHERE date < ?');
    const result = stmt.run(cutoffDateStr);

    return result.changes;
  }
}

export const dailyActionPlanRepository = new DailyActionPlanRepository();
