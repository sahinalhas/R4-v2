/**
 * Profile Aggregation Service
 * T√ºm veri kaynaklarƒ±nƒ± birle≈ütirerek canlƒ± √∂ƒürenci profilini olu≈üturur
 */

import { randomUUID } from 'crypto';
import { DataValidationService } from './data-validation.service.js';
import { FieldMapperService } from './field-mapper.service.js';
import { AIProviderService } from '../../../services/ai-provider.service.js';
import { StandardizedProfileRepository } from '../../standardized-profile/repository/standardized-profile.repository.js';
import * as profileSyncRepo from '../repository/profile-sync.repository.js';
import getDatabase from '../../../lib/database/index.js';
import type { 
  ProfileUpdateRequest, 
  ProfileUpdateResult, 
  UnifiedStudentIdentity,
  DataConflict,
  ProfileDomain,
  ProfileSyncLog
} from '../types/index.js';
import type {
  StandardizedHealthProfile,
  AcademicProfile,
  SocialEmotionalProfile,
  TalentsInterestsProfile
} from '../../../../shared/types/standardized-profile.types.js';

export class ProfileAggregationService {
  private validationService: DataValidationService;
  private fieldMapper: FieldMapperService;
  private aiProvider: AIProviderService;
  private profileRepo: StandardizedProfileRepository;
  private db: ReturnType<typeof getDatabase>;

  constructor() {
    this.validationService = new DataValidationService();
    this.fieldMapper = new FieldMapperService();
    this.aiProvider = AIProviderService.getInstance();
    this.db = getDatabase();
    this.profileRepo = new StandardizedProfileRepository(this.db);
  }

  /**
   * Yeni veri geldiƒüinde profili otomatik g√ºnceller
   */
  async processDataUpdate(request: ProfileUpdateRequest): Promise<ProfileUpdateResult> {
    try {
      console.log(`üìä Processing data update for student ${request.studentId} from ${request.source}`);

      // 1. Veriyi AI ile doƒürula
      const validationResult = await this.validationService.validateData(
        request.source,
        request.rawData
      );

      if (!validationResult.isValid) {
        return {
          success: false,
          updatedDomains: [],
          validationResult,
          conflicts: [],
          autoResolved: false,
          message: `Veri doƒürulama ba≈üarƒ±sƒ±z: ${validationResult.reasoning}`
        };
      }

      // 2. √áeli≈ükileri kontrol et
      const conflicts = validationResult.conflicts || [];

      // 3. Profil alanlarƒ±nƒ± g√ºncelle
      const updatedDomains = await this.updateProfileDomains(
        request.studentId,
        validationResult.suggestedDomain,
        validationResult.extractedInsights,
        request.source
      );

      // 4. Unified Identity'yi g√ºncelle
      await this.refreshUnifiedIdentity(request.studentId);

      // 5. Log kaydƒ±
      await this.logProfileUpdate(request, validationResult, updatedDomains);

      return {
        success: true,
        updatedDomains,
        validationResult,
        conflicts,
        autoResolved: conflicts.length === 0,
        message: `Profil ba≈üarƒ±yla g√ºncellendi. ${updatedDomains.length} alan etkilendi.`
      };
    } catch (error) {
      console.error('Profile update error:', error);
      throw error;
    }
  }

  /**
   * Profil alanlarƒ±nƒ± g√ºnceller
   */
  private async updateProfileDomains(
    studentId: string,
    domains: ProfileDomain[],
    insights: Record<string, any>,
    source: string
  ): Promise<ProfileDomain[]> {
    const updated: ProfileDomain[] = [];

    for (const domain of domains) {
      try {
        await this.updateSpecificDomain(studentId, domain, insights, source);
        updated.push(domain);
      } catch (error) {
        console.error(`Failed to update domain ${domain}:`, error);
      }
    }

    return updated;
  }

  /**
   * Belirli bir profil alanƒ±nƒ± g√ºnceller - AI'NIN BULDUƒûU Bƒ∞LGƒ∞LERƒ∞ GER√áEK ALANLARA YAZAR
   */
  private async updateSpecificDomain(
    studentId: string,
    domain: ProfileDomain,
    insights: Record<string, any>,
    source: string
  ): Promise<void> {
    console.log(`üîÑ Updating ${domain} for student ${studentId}...`);
    
    // Field mapper ile AI insights'ƒ± database field'larƒ±na map et
    const mappedFields = this.fieldMapper.mapInsightsToFields(domain, insights);
    
    if (Object.keys(mappedFields).length === 0) {
      console.log(`‚ö†Ô∏è No fields to update for domain: ${domain}`);
      return;
    }

    try {
      switch (domain) {
        case 'health':
          await this.updateHealthProfile(studentId, mappedFields);
          break;
        
        case 'academic':
          await this.updateAcademicProfile(studentId, mappedFields);
          break;
        
        case 'social_emotional':
          await this.updateSocialEmotionalProfile(studentId, mappedFields);
          break;
        
        case 'talents_interests':
          await this.updateTalentsInterestsProfile(studentId, mappedFields);
          break;
        
        case 'behavioral':
        case 'motivation':
        case 'risk_factors':
        case 'family':
          // Bu alanlar i√ßin gelecekte ek tablolar eklenebilir
          console.log(`üìù Domain ${domain} i√ßin mapped fields:`, mappedFields);
          break;
        
        default:
          console.log(`‚ö†Ô∏è Unknown domain: ${domain}`);
      }
      
      console.log(`‚úÖ Successfully updated ${domain} for student ${studentId}`);
    } catch (error) {
      console.error(`‚ùå Failed to update ${domain}:`, error);
      throw error;
    }
  }

  /**
   * Saƒülƒ±k profilini g√ºnceller - DOKTOR KONTROL√ú Gƒ∞Bƒ∞ Bƒ∞LGƒ∞LER BURAYA YAZILIR
   */
  private async updateHealthProfile(studentId: string, fields: Record<string, any>): Promise<void> {
    console.log(`üè• Updating health profile for ${studentId}:`, fields);
    
    // Mevcut profili al
    const existing = this.profileRepo.getStandardizedHealthProfile(studentId);
    
    // Tarih alanlarƒ±nƒ± normalize et
    if (fields.lastHealthCheckup) {
      fields.lastHealthCheckup = this.fieldMapper.normalizeDate(fields.lastHealthCheckup);
    }
    
    // Profil olu≈ütur veya g√ºncelle
    const profile: StandardizedHealthProfile = {
      id: existing?.id || randomUUID(),
      studentId,
      bloodType: fields.bloodType || existing?.bloodType || null,
      chronicDiseases: this.ensureJsonArray(fields.chronicDiseases || existing?.chronicDiseases || []),
      allergies: this.ensureJsonArray(fields.allergies || existing?.allergies || []),
      currentMedications: this.ensureJsonArray(fields.currentMedications || existing?.currentMedications || []),
      medicalHistory: fields.medicalHistory || existing?.medicalHistory || null,
      specialNeeds: fields.specialNeeds || existing?.specialNeeds || null,
      physicalLimitations: fields.physicalLimitations || existing?.physicalLimitations || null,
      emergencyContact1Name: fields.emergencyContact1Name || existing?.emergencyContact1Name || null,
      emergencyContact1Phone: fields.emergencyContact1Phone || existing?.emergencyContact1Phone || null,
      emergencyContact1Relation: fields.emergencyContact1Relation || existing?.emergencyContact1Relation || null,
      emergencyContact2Name: fields.emergencyContact2Name || existing?.emergencyContact2Name || null,
      emergencyContact2Phone: fields.emergencyContact2Phone || existing?.emergencyContact2Phone || null,
      emergencyContact2Relation: fields.emergencyContact2Relation || existing?.emergencyContact2Relation || null,
      physicianName: fields.physicianName || existing?.physicianName || null,
      physicianPhone: fields.physicianPhone || existing?.physicianPhone || null,
      lastHealthCheckup: fields.lastHealthCheckup || existing?.lastHealthCheckup || null,
      additionalNotes: fields.additionalNotes || existing?.additionalNotes || null
    };
    
    this.profileRepo.upsertStandardizedHealthProfile(profile);
    console.log(`‚úÖ Health profile updated! Last checkup: ${profile.lastHealthCheckup}`);
  }

  /**
   * Akademik profili g√ºnceller
   */
  private async updateAcademicProfile(studentId: string, fields: Record<string, any>): Promise<void> {
    console.log(`üìö Updating academic profile for ${studentId}:`, fields);
    
    const existing = this.profileRepo.getAcademicProfile(studentId);
    
    const profile: AcademicProfile = {
      id: existing?.id || randomUUID(),
      studentId,
      assessmentDate: new Date().toISOString(),
      strongSubjects: this.ensureJsonArray(fields.strongSubjects || existing?.strongSubjects || []),
      weakSubjects: this.ensureJsonArray(fields.weakSubjects || existing?.weakSubjects || []),
      strongSkills: this.ensureJsonArray(fields.strongSkills || existing?.strongSkills || []),
      weakSkills: this.ensureJsonArray(fields.weakSkills || existing?.weakSkills || []),
      primaryLearningStyle: fields.primaryLearningStyle || existing?.primaryLearningStyle || null,
      secondaryLearningStyle: fields.secondaryLearningStyle || existing?.secondaryLearningStyle || null,
      overallMotivation: fields.overallMotivation || existing?.overallMotivation || null,
      studyHoursPerWeek: fields.studyHoursPerWeek || existing?.studyHoursPerWeek || null,
      homeworkCompletionRate: fields.homeworkCompletionRate || existing?.homeworkCompletionRate || null,
      additionalNotes: fields.additionalNotes || existing?.additionalNotes || null,
      assessedBy: 'AI Auto-Sync'
    };
    
    this.profileRepo.upsertAcademicProfile(profile);
    console.log(`‚úÖ Academic profile updated!`);
  }

  /**
   * Sosyal-duygusal profili g√ºnceller
   */
  private async updateSocialEmotionalProfile(studentId: string, fields: Record<string, any>): Promise<void> {
    console.log(`‚ù§Ô∏è Updating social-emotional profile for ${studentId}:`, fields);
    
    const existing = this.profileRepo.getSocialEmotionalProfile(studentId);
    
    const profile: SocialEmotionalProfile = {
      id: existing?.id || randomUUID(),
      studentId,
      assessmentDate: new Date().toISOString(),
      strongSocialSkills: this.ensureJsonArray(fields.strongSocialSkills || existing?.strongSocialSkills || []),
      developingSocialSkills: this.ensureJsonArray(fields.developingSocialSkills || existing?.developingSocialSkills || []),
      empathyLevel: fields.empathyLevel || existing?.empathyLevel || null,
      selfAwarenessLevel: fields.selfAwarenessLevel || existing?.selfAwarenessLevel || null,
      emotionRegulationLevel: fields.emotionRegulationLevel || existing?.emotionRegulationLevel || null,
      conflictResolutionLevel: fields.conflictResolutionLevel || existing?.conflictResolutionLevel || null,
      leadershipLevel: fields.leadershipLevel || existing?.leadershipLevel || null,
      teamworkLevel: fields.teamworkLevel || existing?.teamworkLevel || null,
      communicationLevel: fields.communicationLevel || existing?.communicationLevel || null,
      friendCircleSize: fields.friendCircleSize || existing?.friendCircleSize || null,
      friendCircleQuality: fields.friendCircleQuality || existing?.friendCircleQuality || null,
      socialRole: fields.socialRole || existing?.socialRole || null,
      bullyingStatus: fields.bullyingStatus || existing?.bullyingStatus || null,
      additionalNotes: fields.additionalNotes || existing?.additionalNotes || null,
      assessedBy: 'AI Auto-Sync'
    };
    
    this.profileRepo.upsertSocialEmotionalProfile(profile);
    console.log(`‚úÖ Social-emotional profile updated!`);
  }

  /**
   * Yetenek ve ilgi alanlarƒ± profilini g√ºnceller
   */
  private async updateTalentsInterestsProfile(studentId: string, fields: Record<string, any>): Promise<void> {
    console.log(`üé® Updating talents/interests profile for ${studentId}:`, fields);
    
    const existing = this.profileRepo.getTalentsInterestsProfile(studentId);
    
    const profile: TalentsInterestsProfile = {
      id: existing?.id || randomUUID(),
      studentId,
      assessmentDate: new Date().toISOString(),
      creativeTalents: this.ensureJsonArray(fields.creativeTalents || existing?.creativeTalents || []),
      physicalTalents: this.ensureJsonArray(fields.physicalTalents || existing?.physicalTalents || []),
      primaryInterests: this.ensureJsonArray(fields.primaryInterests || existing?.primaryInterests || []),
      exploratoryInterests: this.ensureJsonArray(fields.exploratoryInterests || existing?.exploratoryInterests || []),
      talentProficiency: existing?.talentProficiency || undefined,
      weeklyEngagementHours: fields.weeklyEngagementHours || existing?.weeklyEngagementHours || null,
      clubMemberships: this.ensureJsonArray(fields.clubMemberships || existing?.clubMemberships || []),
      competitionsParticipated: this.ensureJsonArray(fields.competitionsParticipated || existing?.competitionsParticipated || []),
      additionalNotes: fields.additionalNotes || existing?.additionalNotes || null,
      assessedBy: 'AI Auto-Sync'
    };
    
    this.profileRepo.upsertTalentsInterestsProfile(profile);
    console.log(`‚úÖ Talents/interests profile updated!`);
  }

  /**
   * JSON array formatƒ±nƒ± garanti eder
   */
  private ensureJsonArray(value: any): unknown[] {
    if (Array.isArray(value)) return value;
    if (typeof value === 'string') {
      try {
        const parsed = JSON.parse(value);
        return Array.isArray(parsed) ? parsed : [value];
      } catch {
        return [value];
      }
    }
    return [];
  }

  /**
   * Unified Student Identity'yi yeniler - "√ñƒürenci Kimdir?" sorusunun cevabƒ±
   */
  async refreshUnifiedIdentity(studentId: string): Promise<UnifiedStudentIdentity> {
    try {
      // T√ºm profil verilerini topla
      const allData = await this.gatherAllProfileData(studentId);

      // AI ile √∂ƒürenci kimliƒüini olu≈ütur
      const identity = await this.generateStudentIdentity(studentId, allData);

      // Database'e kaydet
      profileSyncRepo.saveUnifiedIdentity(identity);
      console.log(`‚úÖ Unified identity saved for student ${studentId}`);

      return identity;
    } catch (error) {
      console.error('Unified identity refresh error:', error);
      throw error;
    }
  }

  /**
   * T√ºm profil verilerini toplar
   */
  private async gatherAllProfileData(studentId: string): Promise<any> {
    const studentStmt = this.db.prepare('SELECT * FROM students WHERE id = ?');
    const student = studentStmt.get(studentId);

    const academicStmt = this.db.prepare(`
      SELECT er.*, e.name as examName, e.type as examType 
      FROM exam_results er 
      LEFT JOIN exams e ON er.examId = e.id 
      WHERE er.studentId = ? 
      ORDER BY er.examDate DESC LIMIT 10
    `);
    const academicRecords = academicStmt.all(studentId);

    const behaviorStmt = this.db.prepare(`
      SELECT * FROM behavior_incidents 
      WHERE studentId = ? 
      ORDER BY date DESC LIMIT 10
    `);
    const behaviorRecords = behaviorStmt.all(studentId);

    const counselingStmt = this.db.prepare(`
      SELECT * FROM counseling_sessions 
      WHERE studentId = ? 
      ORDER BY sessionDate DESC LIMIT 10
    `);
    const counselingRecords = counselingStmt.all(studentId);

    const achievementsStmt = this.db.prepare(`
      SELECT * FROM achievements 
      WHERE studentId = ? 
      ORDER BY date DESC LIMIT 10
    `);
    const achievements = achievementsStmt.all(studentId);

    const attendanceStmt = this.db.prepare(`
      SELECT * FROM attendance_records 
      WHERE studentId = ? 
      ORDER BY date DESC LIMIT 30
    `);
    const attendance = attendanceStmt.all(studentId);

    return {
      studentId,
      student,
      academic: academicRecords,
      behavior: behaviorRecords,
      counseling: counselingRecords,
      achievements,
      attendance
    };
  }

  /**
   * AI ile √∂ƒürenci kimliƒüini olu≈üturur
   */
  private async generateStudentIdentity(
    studentId: string,
    allData: any
  ): Promise<UnifiedStudentIdentity> {
    const prompt = `Sen bir eƒüitim uzmanƒ± AI'sƒ±sƒ±n. Bir √∂ƒürenci hakkƒ±ndaki T√úM verileri analiz edip, o √∂ƒürencinin Kƒ∞M olduƒüunu anlamalƒ±sƒ±n.

√ñƒûRENCƒ∞ ID: ${studentId}

T√úM VERƒ∞LER:
${JSON.stringify(allData, null, 2)}

G√ñREV: Bu √∂ƒürencinin kimliƒüini olu≈ütur. ≈ûu sorularƒ± yanƒ±tla:

1. Bu √∂ƒürenci Kƒ∞M? (Ki≈üilik √∂zeti)
2. G√º√ßl√º y√∂nleri neler?
3. Zorluklarƒ± neler?
4. ≈ûu an nasƒ±l bir durumda?
5. √ñƒürenme stili nedir?
6. Risk seviyesi nedir?
7. Hangi m√ºdahaleler √∂nerilir?

ZORUNLU JSON FORMATI:
{
  "summary": "Bu √∂ƒürenci kimdir - 2-3 c√ºmle √∂zet",
  "keyCharacteristics": ["√∂zellik1", "√∂zellik2", "√∂zellik3"],
  "currentState": "≈ûu anki genel durumu",
  "academicScore": 0-100,
  "socialEmotionalScore": 0-100,
  "behavioralScore": 0-100,
  "motivationScore": 0-100,
  "riskLevel": 0-100,
  "strengths": ["g√º√ßl√º y√∂n 1", "g√º√ßl√º y√∂n 2"],
  "challenges": ["zorluk 1", "zorluk 2"],
  "recentChanges": ["yakƒ±n zamandaki deƒüi≈üiklik 1", "deƒüi≈üiklik 2"],
  "personalityProfile": "Ki≈üilik profili a√ßƒ±klamasƒ±",
  "learningStyle": "√ñƒürenme stili",
  "interventionPriority": "low/medium/high/critical",
  "recommendedActions": ["√∂neri 1", "√∂neri 2", "√∂neri 3"]
}

SADECE JSON d√∂nd√ºr.`;

    try {
      const response = await this.aiProvider.chat({
        messages: [{ role: 'user', content: prompt }],
        temperature: 0.4,
        format: 'json'
      });

      const parsed = JSON.parse(response.replace(/```json\n?/g, '').replace(/```\n?/g, ''));

      return {
        studentId,
        lastUpdated: new Date().toISOString(),
        summary: parsed.summary || 'Profil olu≈üturuluyor...',
        keyCharacteristics: parsed.keyCharacteristics || [],
        currentState: parsed.currentState || 'Veri toplanƒ±yor',
        academicScore: parsed.academicScore || 50,
        socialEmotionalScore: parsed.socialEmotionalScore || 50,
        behavioralScore: parsed.behavioralScore || 50,
        motivationScore: parsed.motivationScore || 50,
        riskLevel: parsed.riskLevel || 50,
        strengths: parsed.strengths || [],
        challenges: parsed.challenges || [],
        recentChanges: parsed.recentChanges || [],
        personalityProfile: parsed.personalityProfile || '',
        learningStyle: parsed.learningStyle || '',
        interventionPriority: parsed.interventionPriority || 'medium',
        recommendedActions: parsed.recommendedActions || []
      };
    } catch (error) {
      console.error('Identity generation error:', error);
      
      // Fallback identity
      return {
        studentId,
        lastUpdated: new Date().toISOString(),
        summary: 'Profil analizi devam ediyor...',
        keyCharacteristics: [],
        currentState: 'Veri toplanƒ±yor',
        academicScore: 50,
        socialEmotionalScore: 50,
        behavioralScore: 50,
        motivationScore: 50,
        riskLevel: 50,
        strengths: [],
        challenges: [],
        recentChanges: [],
        personalityProfile: '',
        learningStyle: '',
        interventionPriority: 'medium',
        recommendedActions: []
      };
    }
  }

  /**
   * Profil g√ºncelleme logunu kaydeder
   */
  private async logProfileUpdate(
    request: ProfileUpdateRequest,
    validation: any,
    updatedDomains: ProfileDomain[]
  ): Promise<void> {
    console.log(`üìù Profile update log:`, {
      studentId: request.studentId,
      source: request.source,
      domains: updatedDomains,
      confidence: validation.confidence
    });
    
    // Her domain i√ßin ayrƒ± log kaydƒ±
    for (const domain of updatedDomains) {
      const log: Omit<ProfileSyncLog, 'created_at'> = {
        id: randomUUID(),
        studentId: request.studentId,
        source: request.source,
        sourceId: request.sourceId,
        domain,
        action: 'updated',
        validationScore: validation.confidence || 0,
        aiReasoning: validation.reasoning || '',
        extractedInsights: validation.extractedInsights || {},
        timestamp: request.timestamp || new Date().toISOString(),
        processedBy: 'ai'
      };
      
      profileSyncRepo.saveSyncLog(log);
    }
    
    console.log(`‚úÖ Saved ${updatedDomains.length} sync logs`);
  }

  /**
   * √áeli≈ükileri otomatik √ß√∂z√ºmler
   */
  async resolveConflicts(
    studentId: string,
    conflicts: DataConflict[]
  ): Promise<DataConflict[]> {
    const resolved: DataConflict[] = [];

    for (const conflict of conflicts) {
      // Y√ºksek severity'li √ßeli≈ükiler manuel onay gerektirir
      if (conflict.severity === 'high') {
        console.warn(`‚ö†Ô∏è High severity conflict detected for student ${studentId}:`, conflict);
        continue;
      }

      // D√º≈ü√ºk severity'li √ßeli≈ükiler otomatik √ß√∂z√ºl√ºr
      // Strateji: Yeni veri daha g√ºncel kabul edilir
      resolved.push({
        ...conflict,
        severity: 'low'
      });
    }

    return resolved;
  }
}
